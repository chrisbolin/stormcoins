{"version":3,"sources":["gameLoop.tsx","constants.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialGameState","score","lastScore","bestScore","paused","engine","timestamp","positionX","positionY","velocityX","velocityY","coinVisible","coinX","coinY","windVelocityX","startEngine","type","stopEngine","gameReducer","state","action","dt","Math","abs","SCENE_WIDTH","SCENE_HEIGHT","PLATFORM_LEFT","relativeWindVelocityX","Number","pow","sign","Error","JSON","stringify","DispatchContext","createContext","StateContext","addListenerToMultipleEvents","types","listener","forEach","window","addEventListener","removeEventListener","Platform","className","style","left","width","Vehicle","useContext","bottom","height","Coin","Debug","location","port","margin","position","Instructions","Dashboard","round","ViewportWarning","GamePad","dispatch","onTouchStart","onTouchEnd","Scene","memo","getLocalStorageNumber","key","parseFloat","localStorage","getItem","setLocalStorageNumber","x","setItem","toString","App","getPersistedGameState","useReducer","tick","useCallback","newTimestamp","requestAnimationFrame","useEffect","useGameLoop","removeStartListener","removeStopListeners","addGlobalListeners","Provider","value","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60e058a9.chunk.js","sourcesContent":["import { useEffect, useCallback, useReducer, Dispatch } from \"react\";\nimport {\n  FORCE_ENGINE,\n  FORCE_GRAVITY,\n  COEFFICIENT_DRAG,\n  COEFFICIENT_FRICTION,\n  PLATFORM_LEFT,\n  PLATFORM_WIDTH,\n  VEHICLE_WIDTH,\n  VEHICLE_CRASH_VELOCITY,\n  VEHICLE_MAX_ALTITUDE,\n  COIN_WIDTH,\n  COIN_HEIGHT,\n  VEHICLE_ZERO_VELOCITY,\n  SCENE_WIDTH,\n  SCENE_HEIGHT,\n  WIND_VELOCITY_X_INITIAL,\n  WIND_VELOCITY_X_INCREMENTAL,\n} from \"./constants\";\n\n// STATE\nexport interface GameState {\n  score: number;\n  lastScore: number;\n  bestScore: number;\n  paused: boolean;\n  engine: boolean;\n  timestamp: number;\n  positionX: number;\n  positionY: number;\n  velocityX: number;\n  velocityY: number;\n  coinVisible: boolean;\n  coinX: number;\n  coinY: number;\n  windVelocityX: number;\n}\n\nexport interface PersistedGameState {\n  lastScore: number;\n  bestScore: number;\n}\n\nexport const initialGameState: GameState = {\n  score: 0,\n  lastScore: 0,\n  bestScore: 0,\n  paused: true,\n  engine: false,\n  timestamp: 0,\n  positionX: 50,\n  positionY: 30,\n  velocityX: 0,\n  velocityY: 0,\n  coinVisible: true,\n  coinX: 30,\n  coinY: 35,\n  windVelocityX: WIND_VELOCITY_X_INITIAL,\n};\n\n// ACTIONS\nconst TICK = \"tick\";\nconst START_ENGINE = \"start_engine\";\nconst STOP_ENGINE = \"stop_engine\";\nconst RESTART = \"restart\";\n\ninterface BasicAction {\n  type: typeof START_ENGINE | typeof STOP_ENGINE | typeof RESTART;\n}\n\ninterface TickAction {\n  type: typeof TICK;\n  timestamp: number;\n}\n\nexport type GameAction = TickAction | BasicAction;\n\nexport const startEngine: GameAction = { type: START_ENGINE };\nexport const stopEngine: GameAction = { type: STOP_ENGINE };\nexport const restart: GameAction = { type: RESTART };\n\nexport function gameReducer(state: GameState, action: GameAction) {\n  switch (action.type) {\n    case TICK:\n      let {\n        coinVisible,\n        score,\n        positionX,\n        positionY,\n        velocityX,\n        velocityY,\n        coinX,\n        coinY,\n        windVelocityX,\n      } = state;\n      const dt = action.timestamp - state.timestamp;\n\n      positionX = (positionX + dt * velocityX + SCENE_WIDTH) % SCENE_WIDTH; // wrap x around with (x + width) % width;\n\n      // paused\n      if (state.paused) {\n        return {\n          ...state,\n          timestamp: action.timestamp,\n        };\n      } else if (\n        // completely landed after getting coin\n        !state.coinVisible &&\n        state.positionY === 0 &&\n        Math.abs(state.velocityX) < VEHICLE_ZERO_VELOCITY\n      ) {\n        coinVisible = true;\n        velocityX = 0;\n        coinX = (coinX + SCENE_WIDTH * 0.7) % (SCENE_WIDTH * 0.9);\n        coinY = (coinY + SCENE_HEIGHT * 0.25) % (SCENE_HEIGHT * 0.9);\n        windVelocityX = windVelocityX + WIND_VELOCITY_X_INCREMENTAL;\n      } else if (\n        // landing\n        !state.engine &&\n        state.positionY <= 0 && // allow for 0, as landing sets to 0\n        state.positionX > PLATFORM_LEFT - VEHICLE_WIDTH / 2 &&\n        state.positionX < PLATFORM_LEFT + PLATFORM_WIDTH - VEHICLE_WIDTH / 2 &&\n        -state.velocityY < VEHICLE_CRASH_VELOCITY\n      ) {\n        positionY = 0;\n        velocityY = 0;\n        velocityX = state.velocityX * (1 - COEFFICIENT_FRICTION);\n      } else if (\n        state.positionY < 0 ||\n        state.positionY > VEHICLE_MAX_ALTITUDE\n      ) {\n        // crashed\n        return {\n          ...initialGameState,\n          lastScore: score,\n          bestScore: score > state.bestScore ? score : state.bestScore,\n        };\n      } else {\n        // flying\n        const relativeWindVelocityX = windVelocityX - velocityX;\n        velocityY =\n          state.velocityY +\n          (FORCE_ENGINE * Number(state.engine) - FORCE_GRAVITY) * dt;\n        velocityX =\n          state.velocityX +\n          Math.pow(relativeWindVelocityX, 2) *\n            Math.sign(relativeWindVelocityX) *\n            COEFFICIENT_DRAG *\n            dt;\n        positionY = state.positionY + dt * state.velocityY;\n      }\n\n      if (\n        coinVisible &&\n        state.positionX - state.coinX < COIN_WIDTH &&\n        state.coinX - state.positionX < VEHICLE_WIDTH &&\n        state.positionY - state.coinY < COIN_HEIGHT &&\n        state.coinY - state.positionY < COIN_WIDTH\n      ) {\n        // picked up coin\n        coinVisible = false;\n        score += 100;\n      }\n\n      return {\n        ...state,\n        timestamp: action.timestamp,\n        positionX,\n        positionY,\n        velocityX,\n        velocityY,\n        coinX,\n        coinY,\n        score,\n        coinVisible,\n        windVelocityX,\n      };\n    case START_ENGINE:\n      return { ...state, paused: false, engine: true };\n    case STOP_ENGINE:\n      return { ...state, engine: false };\n    case RESTART:\n      return { ...initialGameState };\n    default:\n      throw new Error(`Invalid action: ${JSON.stringify(action)}`);\n  }\n}\n\nexport function useGameLoop(\n  getPersistedGameState: () => PersistedGameState\n): [GameState, Dispatch<GameAction>] {\n  const [state, dispatch] = useReducer(gameReducer, null, () => ({\n    ...initialGameState,\n    ...getPersistedGameState(),\n  }));\n  const tick = useCallback((newTimestamp) => {\n    dispatch({ type: TICK, timestamp: newTimestamp });\n    window.requestAnimationFrame(tick);\n  }, []);\n\n  useEffect(() => {\n    window.requestAnimationFrame(tick);\n  }, [tick]);\n\n  return [state, dispatch];\n}\n","// PHYSICS CONSTANTS\nexport const FORCE_GRAVITY = 5.5 / 100000; // note: dt is in milliseconds, so this constant needs to be very small\nexport const FORCE_ENGINE = 2.5 * FORCE_GRAVITY;\nexport const COEFFICIENT_DRAG = 0.01;\nexport const COEFFICIENT_FRICTION = 0.1;\n\n// SCENE\nexport const SCENE_HEIGHT = 42;\nexport const SCENE_WIDTH = 100;\n\n// FURNITURE\nexport const PLATFORM_LEFT = 50;\nexport const PLATFORM_WIDTH = 30;\nexport const COIN_WIDTH = 4;\nexport const COIN_HEIGHT = 8;\n\n// VEHICLE\nexport const VEHICLE_WIDTH = 10;\nexport const VEHICLE_HEIGHT = 6;\nexport const VEHICLE_CRASH_VELOCITY = 0.05;\nexport const VEHICLE_ZERO_VELOCITY = 1e-4;\nexport const VEHICLE_MAX_ALTITUDE = 1000;\n\n// WIND\nexport const WIND_VELOCITY_X_INITIAL = 4 / 100;\nexport const WIND_VELOCITY_X_INCREMENTAL = 5 / 1000;\n","import React, {\n  createContext,\n  memo,\n  useContext,\n  useEffect,\n  Dispatch,\n} from \"react\";\nimport \"./App.css\";\nimport {\n  initialGameState,\n  GameAction,\n  useGameLoop,\n  startEngine,\n  stopEngine,\n} from \"./gameLoop\";\nimport {\n  PLATFORM_LEFT,\n  PLATFORM_WIDTH,\n  VEHICLE_WIDTH,\n  VEHICLE_HEIGHT,\n  COIN_HEIGHT,\n  COIN_WIDTH,\n  SCENE_HEIGHT,\n  SCENE_WIDTH,\n} from \"./constants\";\n\nconst DispatchContext = createContext((action: GameAction) => {});\nconst StateContext = createContext(initialGameState);\n\nfunction addListenerToMultipleEvents(types: string[], listener: () => any) {\n  types.forEach((type) => window.addEventListener(type, listener));\n  return () =>\n    types.forEach((type) => window.removeEventListener(type, listener));\n}\n\nfunction addGlobalListeners(dispatch: Dispatch<GameAction>) {\n  const removeStartListener = addListenerToMultipleEvents([\"keydown\"], () =>\n    dispatch(startEngine)\n  );\n  const removeStopListeners = addListenerToMultipleEvents([\"keyup\"], () =>\n    dispatch(stopEngine)\n  );\n\n  return () => {\n    removeStartListener();\n    removeStopListeners();\n  };\n}\n\nfunction Platform() {\n  return (\n    <div\n      className=\"platform\"\n      style={{\n        left: `${PLATFORM_LEFT}vw`,\n        width: `${PLATFORM_WIDTH}vw`,\n      }}\n    >\n      platform\n    </div>\n  );\n}\n\nfunction Vehicle() {\n  const { positionX, positionY } = useContext(StateContext);\n  return (\n    <div\n      className=\"vehicle\"\n      style={{\n        left: `${positionX}vw`,\n        bottom: `${positionY}vw`,\n        width: `${VEHICLE_WIDTH}vw`,\n        height: `${VEHICLE_HEIGHT}vw`,\n      }}\n    >\n      helicopter\n    </div>\n  );\n}\n\nfunction Coin() {\n  const { coinX, coinY, coinVisible } = useContext(StateContext);\n  if (!coinVisible) return null;\n  return (\n    <div\n      className=\"coin\"\n      style={{\n        left: `${coinX}vw`,\n        bottom: `${coinY}vw`,\n        width: `${COIN_WIDTH}vw`,\n        height: `${COIN_HEIGHT}vw`,\n      }}\n    >\n      coin\n    </div>\n  );\n}\n\nfunction Debug() {\n  const state = useContext(StateContext);\n  if (window.location.port !== \"3000\") return null;\n  return (\n    <pre style={{ margin: 0, position: \"absolute\", bottom: 0, left: 0 }}>\n      {JSON.stringify(state, null, 2)}\n    </pre>\n  );\n}\n\nfunction Instructions() {\n  return (\n    <h3>\n      Goal: get coin, land, repeat.\n      <br />\n      Engine: any key, click, or touch anywhere.\n      <br />\n      There are no other controls.\n      <br />\n      The wind will push you, like it or not.\n      <br />\n      Don't land too hard pls.\n    </h3>\n  );\n}\n\nfunction Dashboard() {\n  const {\n    paused,\n    score,\n    bestScore,\n    lastScore,\n    windVelocityX,\n    velocityX,\n  } = useContext(StateContext);\n\n  return (\n    <>\n      <h3>\n        score: {score}\n        <br />\n        best: {bestScore}; last: {lastScore}\n        <br />\n        speed: {Math.round(velocityX * 1000)}\n        <br />\n        wind speed: {Math.round(windVelocityX * 1000)}\n      </h3>\n      {paused && <Instructions />}\n    </>\n  );\n}\n\nfunction ViewportWarning() {\n  return (\n    <div className=\"ViewportWarning\">\n      <h3>Can you make your browser taller? You can't see all of the game.</h3>\n    </div>\n  );\n}\n\nfunction GamePad() {\n  const dispatch = useContext(DispatchContext);\n  return (\n    <div\n      className=\"GamePad\"\n      onTouchStart={() => dispatch(startEngine)}\n      onTouchEnd={() => dispatch(stopEngine)}\n    />\n  );\n}\n\nconst Scene = memo(function () {\n  return (\n    <div\n      className=\"scene\"\n      style={{\n        height: `${SCENE_HEIGHT}vw`,\n        width: `${SCENE_WIDTH}vw`,\n      }}\n    >\n      <Dashboard />\n      <Debug />\n      <Platform />\n      <Coin />\n      <Vehicle />\n      <ViewportWarning />\n      <GamePad />\n    </div>\n  );\n});\n\nfunction getLocalStorageNumber(key: string): number {\n  return parseFloat(localStorage.getItem(key) || \"\") || 0;\n}\n\nfunction setLocalStorageNumber(key: string, x: number): void {\n  localStorage.setItem(key, x.toString());\n}\n\nfunction App() {\n  const [state, dispatch] = useGameLoop(() => {\n    const bestScore = getLocalStorageNumber(\"bestScore\");\n    const lastScore = getLocalStorageNumber(\"lastScore\");\n    return { bestScore, lastScore };\n  });\n\n  useEffect(() => {\n    const removeGlobalListeners = addGlobalListeners(dispatch);\n    return removeGlobalListeners;\n  }, [dispatch]);\n\n  useEffect(() => {\n    setLocalStorageNumber(\"bestScore\", state.bestScore);\n    setLocalStorageNumber(\"lastScore\", state.lastScore);\n  }, [state.lastScore, state.bestScore]);\n\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <StateContext.Provider value={state}>\n        <div className=\"App\">\n          <Scene />\n        </div>\n      </StateContext.Provider>\n    </DispatchContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}